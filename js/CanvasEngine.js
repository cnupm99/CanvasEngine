// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(["base", "Scenes", "FPS"], function(base, Scenes, FPS) {
    var CanvasEngine;
    return CanvasEngine = (function(superClass) {
      extend(CanvasEngine, superClass);

      function CanvasEngine(options) {
        this._animate = bind(this._animate, this);
        var scene;
        if (!this._canvasSupport()) {
          console.log("your browser not support canvas and/or context");
          return false;
        }
        CanvasEngine.__super__.constructor.call(this, options);
        this._parent = options.parent || document.body;
        this.scenes = new Scenes(this._parent);
        this._beforeAnimate = [];
        this._showFPS = options.showFPS != null ? options.showFPS : true;
        if (this._showFPS) {
          scene = this.scenes.create({
            name: "FPS",
            sizes: [90, 40],
            position: [5, 5],
            zIndex: 9999,
            setActive: false
          });
          this._FPS = new FPS({
            scene: scene
          });
        }
        this.start();
      }

      CanvasEngine.prototype.start = function() {
        return this._render = requestAnimationFrame(this._animate);
      };

      CanvasEngine.prototype.stop = function() {
        return cancelAnimationFrame(this._render);
      };

      CanvasEngine.prototype.addEvent = function(handler) {
        return this._beforeAnimate.push(handler);
      };

      CanvasEngine.prototype.removeEvent = function(handler) {
        return this._beforeAnimate.forEach((function(_this) {
          return function(item, i) {
            if (item === handler) {
              return _this._beforeAnimate.splice(i, 1);
            }
          };
        })(this));
      };

      CanvasEngine.prototype.add = function(options) {
        var scene, sceneName, type;
        type = options.type || "scene";
        if (type === "scene") {
          if (options.sizes == null) {
            options.sizes = this._sizes;
          }
          return this.scenes.create(options);
        } else {
          sceneName = options.scene || this.scenes.active() || "default";
          scene = this.scenes.create({
            name: sceneName,
            sizes: options.sizes || this._sizes
          });
          return scene.add(options);
        }
      };

      CanvasEngine.prototype._canvasSupport = function() {
        return document.createElement("canvas").getContext != null;
      };

      CanvasEngine.prototype._animate = function() {
        var needAnimation;
        this._beforeAnimate.forEach(function(handler) {
          if (typeof handler === "function") {
            return handler();
          }
        });
        needAnimation = this.scenes.needAnimation();
        if (needAnimation) {
          this.scenes.animate();
        }
        if (this._showFPS) {
          this._FPS.update(needAnimation);
        }
        return this._render = requestAnimationFrame(this._animate);
      };

      return CanvasEngine;

    })(base);
  });

}).call(this);
