// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(["AbstractObject", "Scene"], function(AbstractObject, Scene) {
    var CanvasEngine;
    return CanvasEngine = (function(superClass) {
      extend(CanvasEngine, superClass);

      function CanvasEngine(options) {
        this.animate = bind(this.animate, this);
        if (!this.canvasSupport()) {
          console.log("your browser not support canvas and/or context");
          return false;
        }
        CanvasEngine.__super__.constructor.call(this, options);
        this.add({
          type: "scene",
          name: "default"
        });
        this.beforeAnimate = [];
        this.start();
      }

      CanvasEngine.prototype.add = function(options) {
        var scene, type;
        if (options == null) {
          options = {};
        }
        type = options.type || "scene";
        if (type === "scene") {
          return this._createScene(options);
        } else {
          scene = this.get(options.scene);
          if (!scene) {
            scene = this.scene;
          }
          return scene.add(options);
        }
      };

      CanvasEngine.prototype.createScene = function(options) {
        var scene;
        if (options.visible == null) {
          options.visible = this.visible;
        }
        if (options.position == null) {
          options.position = this.position;
        }
        if (options.size == null) {
          options.size = this.sizes;
        }
        if (options.center == null) {
          options.center = this.center;
        }
        if (options.rotation == null) {
          options.rotation = this.rotation;
        }
        if (options.alpha == null) {
          options.alpha = this.alpha;
        }
        if (options.mask == null) {
          options.mask = this.mask;
        }
        if (options.shadow == null) {
          options.shadow = this.shadow;
        }
        options.parent = this;
        options.stage = this.parent;
        scene = new Scene(options);
        this.childrens.push(scene);
        return this.scene = scene;
      };

      CanvasEngine.prototype.start = function() {
        return this._render = requestAnimationFrame(this.animate);
      };

      CanvasEngine.prototype.stop = function() {
        return cancelAnimationFrame(this._render);
      };

      CanvasEngine.prototype.animate = function() {
        this.beforeAnimate.forEach(function(handler) {
          if (typeof handler === "function") {
            return handler();
          }
        });
        this.needAnimation = false;
        this.childrens.forEach(function(child) {
          var needAnimation;
          needAnimation = child.needAnimation || child.childrens.some(function(childOfChild) {
            return childOfChild.needAnimation;
          });
          if (needAnimation) {
            child.animate();
          }
          return this.needAnimation = this.needAnimation || needAnimation;
        });
        return this._render = requestAnimationFrame(this.animate);
      };

      CanvasEngine.prototype.addEvent = function(handler) {
        return this.beforeAnimate.push(handler);
      };

      CanvasEngine.prototype.removeEvent = function(handler) {
        return this.beforeAnimate.forEach((function(_this) {
          return function(item, i) {
            if (item === handler) {
              return _this.beforeAnimate.splice(i, 1);
            }
          };
        })(this));
      };

      CanvasEngine.prototype.fullscreen = function(value) {
        if (value == null) {
          value = true;
        }
        if (value) {
          if (this.parent.requestFullScreen != null) {
            this.parent.requestFullScreen();
          } else if (this.parent.webkitRequestFullScreen != null) {
            this.parent.webkitRequestFullScreen();
          } else if (this.parent.mozRequestFullScreen != null) {
            this.parent.mozRequestFullScreen();
          } else {
            return false;
          }
        } else {
          if (document.cancelFullScreen != null) {
            document.cancelFullScreen();
          } else if (document.webkitCancelFullScreen != null) {
            document.webkitCancelFullScreen();
          } else if (document.mozCancelFullScreen != null) {
            document.mozCancelFullScreen();
          } else if (document.exitFullScreen != null) {
            document.exitFullScreen();
          } else {
            return false;
          }
        }
        return true;
      };

      CanvasEngine.prototype.isFullscreen = function() {
        var element;
        element = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullscreenElement;
        return element != null;
      };

      CanvasEngine.prototype.canvasSupport = function() {
        return document.createElement("canvas").getContext != null;
      };

      return CanvasEngine;

    })(AbstractObject);
  });

}).call(this);
