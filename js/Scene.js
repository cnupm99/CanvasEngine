// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(["base", "Image", "Text", "Graph", "TilingImage"], function(base, Image, Text, Graph, TilingImage) {
    var Scene;
    return Scene = (function(superClass) {
      extend(Scene, superClass);

      function Scene(options) {
        Scene.__super__.constructor.call(this, options);
        this.name = options.name;
        this._parentPosition = options.parentPosition;
        this.canvas = document.createElement("canvas");
        this.canvas.style.position = "absolute";
        this.setZ(options.zIndex);
        this.context = this.canvas.getContext("2d");
        this.setTransform(options);
        this._mask = false;
        this._needAnimation = false;
        this.objects = [];
      }

      Scene.prototype.setZ = function(value) {
        this._zIndex = this._int(value);
        return this.canvas.style.zIndex = this._zIndex;
      };

      Scene.prototype.getZ = function() {
        return this._zIndex;
      };

      Scene.prototype.add = function(options) {
        var result;
        if (options.type == null) {
          return;
        }
        options.parent = {};
        options.parent.context = this.context;
        options.parent.position = [this._position[0] + this._parentPosition[0], this._position[1] + this._parentPosition[1]];
        options.parent.sizes = this._sizes;
        switch (options.type) {
          case "image":
            result = new Image(options);
            break;
          case "text":
            result = new Text(options);
            break;
          case "graph":
            result = new Graph(options);
            break;
          case "tile":
            result = new TilingImage(options);
        }
        this.objects.push(result);
        result.getScene = (function(_this) {
          return function() {
            return _this;
          };
        })(this);
        return result;
      };

      Scene.prototype.get = function(objectName) {
        var answer;
        answer = false;
        this.objects.some(function(_object) {
          var flag;
          flag = _object.name === objectName;
          if (flag) {
            answer = _object;
          }
          return flag;
        });
        return answer;
      };

      Scene.prototype.remove = function(objectName) {
        var index;
        index = -1;
        this.objects.some(function(_object, i) {
          var flag;
          flag = _object.name === objectName;
          if (flag) {
            index = i;
          }
          return flag;
        });
        if (index > -1) {
          this.objects.splice(index, 1);
          return true;
        }
        return false;
      };

      Scene.prototype.addChild = function(_object) {
        this.objects.push(_object);
        return this._needAnimation = true;
      };

      Scene.prototype.removeChild = function(_object) {
        var index;
        index = -1;
        this.objects.some(function(_object2, i) {
          var flag;
          flag = _object2 === _object;
          if (flag) {
            index = i;
          }
          return flag;
        });
        if (index > -1) {
          this.objects.splice(index, 1);
          return true;
        }
        return false;
      };

      Scene.prototype.needAnimation = function() {
        return this._needAnimation || this.objects.some(function(_object) {
          return _object.needAnimation;
        });
      };

      Scene.prototype.testPoint = function(pointX, pointY) {
        var imageData, offsetX, offsetY, pixelData;
        if (!this.testRect(pointX, pointY)) {
          return false;
        }
        offsetX = pointX - this._position[0] - this._parentPosition[0];
        offsetY = pointY - this._position[1] - this._parentPosition[1];
        imageData = this.context.getImageData(offsetX, offsetY, 1, 1);
        pixelData = imageData.data;
        if (pixelData.every == null) {
          pixelData.every = Array.prototype.every;
        }
        return !pixelData.every(function(value) {
          return value === 0;
        });
      };

      Scene.prototype.testRect = function(pointX, pointY) {
        var rect;
        rect = {
          left: this._position[0] + this._parentPosition[0],
          top: this._position[1] + this._parentPosition[1]
        };
        rect.right = rect.left + this._sizes[0];
        rect.bottom = rect.top + this._sizes[1];
        return (pointX >= rect.left) && (pointX <= rect.right) && (pointY >= rect.top) && (pointY <= rect.bottom);
      };

      Scene.prototype.getSizes = function() {
        return this._sizes;
      };

      Scene.prototype.setMask = function(x, y, width, height) {
        if (arguments.length < 4) {
          this._mask = false;
        } else {
          this._mask = {
            x: this._int(x),
            y: this._int(y),
            width: this._int(width),
            height: this._int(height)
          };
        }
        return this._needAnimation = true;
      };

      Scene.prototype.setTransform = function(options) {
        this.setSizes(options.sizes);
        this.setPosition(options.position);
        this.setCenter(options.center);
        this.setRotation(options.rotation);
        return this.setAlpha(options.alpha);
      };

      Scene.prototype.setSizes = function(sizes) {
        if (sizes != null) {
          this._sizes = this._point(sizes);
        }
        this.canvas.width = this._sizes[0];
        this.canvas.height = this._sizes[1];
        return this._needAnimation = true;
      };

      Scene.prototype.setPosition = function(position) {
        if (position != null) {
          this._position = this._point(position);
        }
        this.canvas.style.left = this._position[0] + "px";
        this.canvas.style.top = this._position[1] + "px";
        return this._needAnimation = true;
      };

      Scene.prototype.setCenter = function(center) {
        if (center != null) {
          this._center = this._point(center);
        }
        this.context.translate(this._center[0], this._center[1]);
        return this._needAnimation = true;
      };

      Scene.prototype.setRotation = function(rotation) {
        if (rotation != null) {
          this._rotation = this._value(rotation);
        }
        this.context.rotation = this._rotation * Math.PI / 180;
        return this._needAnimation = true;
      };

      Scene.prototype.setAlpha = function(alpha) {
        if (alpha != null) {
          this._alpha = this._value(alpha);
        }
        this.context.globalAlpha = this._alpha;
        return this._needAnimation = true;
      };

      Scene.prototype.animate = function() {
        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
        if (this._mask) {
          this.context.beginPath();
          this.context.rect(this._mask.x, this._mask.y, this._mask.width, this._mask.height);
          this.context.clip();
        }
        this.objects.forEach((function(_this) {
          return function(_object) {
            return _object.animate();
          };
        })(this));
        return this._needAnimation = false;
      };

      return Scene;

    })(base);
  });

}).call(this);
