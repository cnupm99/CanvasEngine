// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(["DisplayObject"], function(DisplayObject) {
    var Image;
    return Image = (function(superClass) {
      extend(Image, superClass);

      function Image(options) {
        this._imageOnLoad = bind(this._imageOnLoad, this);
        Image.__super__.constructor.call(this, options);
        this.type = "image";
        this.onload = options.onload;
        this.loaded = false;
        this.image = document.createElement("img");
        this.image.onload = this._imageOnLoad;
        this.loadedFrom = "";
        this.setRect(options.rect);
        if (options.src != null) {
          this.src(options.src);
        } else {
          this.from(options.from);
        }
      }

      Image.prototype.setRect = function(value) {
        this.rect = value || false;
        this.needAnimation = true;
        return this.rect;
      };

      Image.prototype.src = function(value) {
        this.loaded = false;
        this.loadedFrom = value;
        return this.image.src = value;
      };

      Image.prototype.from = function(from, src) {
        if (from == null) {
          return;
        }
        this.image = from;
        this.loadedFrom = src || "";
        this.upsize([this.image.width, this.image.height]);
        if (this.size[0] <= 0 || this.size[1] <= 0) {
          this.resize(this.realSize);
        }
        this.loaded = true;
        return this.needAnimation = true;
      };

      Image.prototype.animate = function() {
        if (!this.loaded) {
          return;
        }
        Image.__super__.animate.call(this);
        if (this.rect) {
          return this.context.drawImage(this.image, this.rect[0], this.rect[1], this.rect[2], this.rect[3], this._deltaX, this._deltaY, this.size[0], this.size[1]);
        } else {
          if (this.size[0] === this.realSize[0] && this.size[1] === this.realSize[1]) {
            return this.context.drawImage(this.image, this._deltaX, this._deltaY);
          } else {
            return this.context.drawImage(this.image, this._deltaX, this._deltaY, this.size[0], this.size[1]);
          }
        }
      };

      Image.prototype._imageOnLoad = function(e) {
        this.upsize([this.image.width, this.image.height]);
        if (this.size[0] <= 0 || this.size[1] <= 0) {
          this.resize(this.realSize);
        }
        this.loaded = true;
        this.needAnimation = true;
        if (this.onload != null) {
          return this.onload(this.realSize);
        }
      };

      return Image;

    })(DisplayObject);
  });

}).call(this);
