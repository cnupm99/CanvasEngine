// Generated by CoffeeScript 2.0.2
(function() {
  "use strict";
  define(function() {
    var AbstractObject;
    return AbstractObject = (function() {
      
      // Абстрактный объект, не имеющий отображения на экране
      // но вмещающий в себя общедоступные базовые методы

      class AbstractObject {
        
        // методы:

        //  point(value1, value2):Array - приведение выражений к виду [x, y]
        //  pixel(value1, value2):Array - округляет результат pixel
        //  int(value):int - приведение к целому числу
        //  number(value):Number - приведение к числу
        //  deg2rad(value):Number - перевод из градусов в радианы

        // константы:

        //  _PIDIV180 = Math.PI / 180

        constructor(options) {
          if (options == null) {
            
            // если ничего не передано в качестве опций, создаем пустой объект
            // чтобы можно было обратиться к его свойствам

            options = {};
          }
        }

        
        // приведение выражений к виду [x, y]

        // 	все точки хранятся и передаются в виде массивов [x, y]
        // 	чтобы сократить время и объем записей множества точек

        // 	если ничего не передано, возвращает [0, 0]
        // 	если передано два параметра, вернет [value1, value2]
        // 	если первый параметр массив, то вернет [value1[0], value1[1]]
        // 	если первый параметр объект, то вернет [value1.x, value1.y] либо [value1.width, value1.height]
        // 	иначе вeрнет [0, 0]

        point(value1, value2) {
          if (value1 == null) {
            // значение не существует
            return [0, 0];
          }
          if (value2 != null) {
            // передано два параметра, считаем их числами и возвращаем массив
            return [this.number(value1), this.number(value2)];
          }
          // если передан массив
          if (Array.isArray(value1)) {
            // возвращаем первые два элемента
            return [this.number(value1[0]), this.number(value1[1])];
          } else {
            if ((value1.x != null) && (value1.y != null)) {
              // если есть свойства x и y
              // может быть это объект?
              return [this.number(value1.x), this.number(value1.y)];
            }
            if ((value1.width != null) && (value1.height != null)) {
              // если есть свойства width и height
              return [this.number(value1.width), this.number(value1.height)];
            }
            // по умолчанию
            return [0, 0];
          }
        }

        
        // Округляет результ point

        pixel(value1, value2) {
          var result;
          result = this.point(value1, value2);
          return [result[0] >> 0, result[1] >> 0];
        }

        
        // приведение выражения к целому числу

        int(value) {
          return this.number(value) >> 0;
        }

        
        // приведение выражения к числу

        number(value) {
          if (value != null) {
            return +value;
          } else {
            return 0;
          }
        }

        
        // переводим градусы в радианы

        deg2rad(value) {
          return this.number(value) * this._PIDIV180;
        }

      };

      
      // константа, для ускорения рассчетов
      // используется в rad

      AbstractObject.prototype._PIDIV180 = Math.PI / 180;

      return AbstractObject;

    })();
  });

}).call(this);
