// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  define(function() {
    var AbstractObject;
    return AbstractObject = (function() {
      function AbstractObject(options) {
        var _alpha, _center, _mask, _position, _rotation, _shadow, _size, _visible;
        if (!options) {
          options = {};
        }
        this.parent = options.parent || document.body;
        this.childrens = [];
        this.needAnimation = true;
        _visible = options.visible != null ? options.visible : true;
        Object.defineProperty(this, "visible", {
          get: function() {
            return _visible;
          },
          set: function(value) {
            _visible = value != null ? value : true;
            return this.needAnimation = _visible;
          }
        });
        _position = this.point(options.position);
        Object.defineProperty(this, "position", {
          get: function() {
            return _position;
          },
          set: function(value) {
            _position = this.point(value);
            this.needAnimation = true;
            return _position;
          }
        });
        _size = this.point(options.size);
        Object.defineProperty(this, "size", {
          get: function() {
            return _size;
          },
          set: function(value) {
            _size = this.point(value);
            this.needAnimation = true;
            return _size;
          }
        });
        _center = this.point(options.center);
        Object.defineProperty(this, "center", {
          get: function() {
            return _center;
          },
          set: function(value) {
            _center = this.point(value);
            this.needAnimation = true;
            return _center;
          }
        });
        _rotation = this.number(options.rotation);
        Object.defineProperty(this, "rotation", {
          get: function() {
            return _rotation;
          },
          set: function(value) {
            _rotation = this.number(value);
            this.needAnimation = true;
            return _rotation;
          }
        });
        _alpha = this.number(options.alpha);
        Object.defineProperty(this, "alpha", {
          get: function() {
            return _alpha;
          },
          set: function(value) {
            _alpha = this.number(value);
            if (_alpha < 0) {
              _alpha = 0;
            }
            if (_alpha > 1) {
              _alpha = 1;
            }
            this.needAnimation = true;
            return _alpha;
          }
        });
        _mask = options.mask || false;
        Object.defineProperty(this, "mask", {
          get: function() {
            return _mask;
          },
          set: function(value) {
            if ((value == null) || (!value)) {
              _mask = false;
              return;
            }
            _mask = {
              x: this.int(value.x),
              y: this.int(value.y),
              width: this.int(value.width),
              height: this.int(value.height)
            };
            this.needAnimation = true;
            return _mask;
          }
        });
        _shadow = options.shadow || false;
        Object.defineProperty(this, "shadow", {
          get: function() {
            return _shadow;
          },
          set: function(value) {
            if ((value == null) || (!value)) {
              _shadow = false;
              return;
            }
            _shadow = {
              color: value.color || "#000",
              blur: value.blur || 3,
              offsetX: this.int(value.offsetX),
              offsetY: this.int(value.offsetY),
              offset: this.int(value.offset)
            };
            return this.needAnimation = true;
          }
        });
      }

      AbstractObject.prototype.get = function(childName) {
        var result;
        result = false;
        this.childrens.some(function(child) {
          var flag;
          flag = child.name === childName;
          if (flag) {
            result = child;
          }
          return flag;
        });
        return result;
      };

      AbstractObject.prototype.shift = function(deltaX, deltaY) {
        if (deltaX == null) {
          deltaX = 0;
        }
        if (deltaY == null) {
          deltaY = 0;
        }
        return this.position = [deltaX + this.position[0], deltaY + this.position[1]];
      };

      AbstractObject.prototype.point = function(value1, value2) {
        if (value1 == null) {
          return [0, 0];
        }
        if (value2 != null) {
          return [this.int(value1), this.int(value2)];
        }
        if (Array.isArray(value1)) {
          return [this.int(value1[0]), this.int(value1[1])];
        } else {
          if ((value1.x != null) && (value1.y != null)) {
            return [this.int(value1.x), this.int(value1.y)];
          }
          if ((value1.width != null) && (value1.height != null)) {
            return [this.int(value1.width), this.int(value1.height)];
          }
          return [0, 0];
        }
      };

      AbstractObject.prototype.int = function(value) {
        return Math.round(this.number(value));
      };

      AbstractObject.prototype.number = function(value) {
        if (value != null) {
          return +value;
        } else {
          return 0;
        }
      };

      AbstractObject.prototype.deg2rad = function(value) {
        return this.number(value) * Math.PI / 180;
      };

      return AbstractObject;

    })();
  });

}).call(this);
