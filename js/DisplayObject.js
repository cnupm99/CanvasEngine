// Generated by CoffeeScript 1.12.7
(function() {
  "use strict";
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(["AbstractObject"], function(AbstractObject) {
    var DisplayObject;
    return DisplayObject = (function(superClass) {
      extend(DisplayObject, superClass);

      function DisplayObject(options) {
        var stage;
        DisplayObject.__super__.constructor.call(this, options);
        this.name = options.name || "";
        this.type = "DisplayObject";
        if (options.canvas != null) {
          this.canvas = options.canvas;
        } else {
          stage = options.parent || document.body;
          this.canvas = document.createElement("canvas");
          this.canvas.style.position = "absolute";
          stage.appendChild(this.canvas);
        }
        this.context = options.context || this.canvas.getContext("2d");
        this._setProperties(options);
      }

      DisplayObject.prototype.set = function(options) {
        if (options == null) {
          return;
        }
        if (options.visible != null) {
          this.visible = options.visible;
        }
        if (this.visible) {
          this.show();
        } else {
          this.hide();
        }
        if (options.position != null) {
          this.move(options.position);
        }
        if (options.size != null) {
          this.resize(options.size);
        }
        if (options.realSize != null) {
          this.upsize(options.realSize);
        }
        if (options.center != null) {
          this.setCenter(options.center);
        }
        if (options.anchor != null) {
          this.setAnchor(options.anchor);
        }
        if (options.scale != null) {
          this.zoom(options.scale);
        }
        if (options.rotation != null) {
          this.rotate(options.rotation);
        }
        if (options.alpha != null) {
          this.setAlpha(options.alpha);
        }
        if (options.shadow != null) {
          this.setShadow(options.shadow);
        }
        return this.needAnimation = true;
      };

      DisplayObject.prototype.show = function() {
        this.visible = true;
        this.needAnimation = true;
        return true;
      };

      DisplayObject.prototype.hide = function() {
        this.visible = false;
        this.needAnimation = true;
        return false;
      };

      DisplayObject.prototype.move = function(value1, value2) {
        this.position = this.pixel(value1, value2);
        this.needAnimation = true;
        return this.position;
      };

      DisplayObject.prototype.shift = function(value1, value2) {
        if (value2 == null) {
          value2 = 0;
        }
        return this.move([value1 + this.position[0], value2 + this.position[1]]);
      };

      DisplayObject.prototype.resize = function(value1, value2) {
        this.size = this.pixel(value1, value2);
        this.setAnchor(this.anchor);
        this.needAnimation = true;
        return this.size;
      };

      DisplayObject.prototype.upsize = function(value1, value2) {
        this.realSize = this.pixel(value1, value2);
        this.setAnchor(this.anchor);
        return this.realSize;
      };

      DisplayObject.prototype.setCenter = function(value1, value2) {
        var anchorX, anchorY, size;
        this.center = this.pixel(value1, value2);
        size = this.size[0] === 0 && this.size[1] === 0 ? this.realSize : this.size;
        anchorX = size[0] === 0 ? 0 : this.center[0] / size[0];
        anchorY = size[1] === 0 ? 0 : this.center[1] / size[1];
        this.anchor = [anchorX, anchorY];
        this.needAnimation = true;
        return this.center;
      };

      DisplayObject.prototype.setAnchor = function(value1, value2) {
        var size;
        this.anchor = this.point(value1, value2);
        size = this.size[0] === 0 && this.size[1] === 0 ? this.realSize : this.size;
        this.center = [this.int(size[0] * this.anchor[0]), this.int(size[1] * this.anchor[1])];
        this.needAnimation = true;
        return this.anchor;
      };

      DisplayObject.prototype.zoom = function(value1, value2) {
        this.scale = value1 != null ? this.point(value1, value2) : [1, 1];
        this.needAnimation = true;
        return this.scale;
      };

      DisplayObject.prototype.rotate = function(value) {
        this.rotation = this.int(value);
        if (this.rotation < 0) {
          this.rotation = 360 + this.rotation;
        }
        if (this.rotation >= 360) {
          this.rotation = this.rotation % 360;
        }
        this._rotation = this.rotation * this._PIDIV180;
        this.needAnimation = true;
        return this.rotation;
      };

      DisplayObject.prototype.rotateOn = function(value) {
        return this.rotate(this.rotation + this.int(value));
      };

      DisplayObject.prototype.setAlpha = function(value) {
        this.alpha = value ? this.number(value) : 1;
        if (this.alpha < 0) {
          this.alpha = 0;
        }
        if (this.alpha > 1) {
          this.alpha = 1;
        }
        this.needAnimation = true;
        return this.alpha;
      };

      DisplayObject.prototype.setShadow = function(value) {
        if ((value == null) || (!value)) {
          this.shadow = false;
        } else {
          this.shadow = {
            color: value.color || "#000",
            blur: value.blur || 3,
            offsetX: this.int(value.offsetX),
            offsetY: this.int(value.offsetY),
            offset: this.int(value.offset)
          };
        }
        this.needAnimation = true;
        return this.shadow;
      };

      DisplayObject.prototype.testPoint = function(pointX, pointY) {
        var imageData, offsetX, offsetY, pixelData, rect;
        rect = this.canvas.getBoundingClientRect();
        offsetX = pointX - rect.left;
        offsetY = pointY - rect.top;
        imageData = this.context.getImageData(offsetX, offsetY, 1, 1);
        pixelData = imageData.data;
        if (pixelData.every == null) {
          pixelData.every = Array.prototype.every;
        }
        return !pixelData.every(function(value) {
          return value === 0;
        });
      };

      DisplayObject.prototype.testRect = function(pointX, pointY) {
        var rect;
        rect = this.canvas.getBoundingClientRect();
        if (this.type !== "scene") {
          rect = {
            left: rect.left + this.position[0],
            top: rect.top + this.position[1],
            right: rect.left + this.position[0] + this.size[0],
            bottom: rect.top + this.position[1] + this.size[1]
          };
        }
        return (pointX >= rect.left) && (pointX <= rect.right) && (pointY >= rect.top) && (pointY <= rect.bottom);
      };

      DisplayObject.prototype.animate = function() {
        this._deltaX = this.position[0];
        this._deltaY = this.position[1];
        if (this.shadow) {
          this.context.shadowColor = this.shadow.color;
          this.context.shadowBlur = this.shadow.blur;
          this.context.shadowOffsetX = Math.max(this.shadow.offsetX, this.shadow.offset);
          this.context.shadowOffsetY = Math.max(this.shadow.offsetY, this.shadow.offset);
        }
        if (this.scale[0] !== 1 || this.scale[1] !== 1) {
          this.context.scale(this.scale[0], this.scale[1]);
        }
        if (this.alpha !== 1) {
          this.context.globalAlpha = this.alpha;
        }
        if (this.rotation !== 0) {
          this.context.translate(this.center[0] + this.position[0], this.center[1] + this.position[1]);
          this.context.rotate(this._rotation);
          this._deltaX = -this.center[0];
          this._deltaY = -this.center[1];
        }
        return this.needAnimation = false;
      };

      DisplayObject.prototype._setProperties = function(options) {
        this.visible = options.visible != null ? options.visible : true;
        if (this.visible) {
          this.show();
        } else {
          this.hide();
        }
        this.move(options.position);
        this.realSize = [0, 0];
        this.resize(options.size);
        if ((options.center != null) || (options.anchor == null)) {
          this.setCenter(options.center);
        }
        if ((options.anchor != null) && (options.center == null)) {
          this.setAnchor(options.anchor);
        }
        this.zoom(options.scale);
        this.rotate(options.rotation);
        this.setAlpha(options.alpha);
        this.setShadow(options.shadow);
        return this.needAnimation = true;
      };

      DisplayObject.prototype.getOptions = function() {
        var options;
        return options = {
          name: this.name,
          type: this.type,
          visible: this.visible,
          position: [this.position[0], this.position[1]],
          size: [this.size[0], this.size[1]],
          realSize: [this.realSize[0], this.realSize[1]],
          center: [this.center[0], this.center[1]],
          anchor: [this.anchor[0], this.anchor[1]],
          scale: [this.scale[0], this.scale[1]],
          rotation: this.rotation,
          alpha: this.alpha,
          shadow: this.shadow ? {
            blur: this.shadow.blur,
            color: this.shadow.color,
            offset: this.shadow.offset,
            offsetX: this.shadow.offsetX,
            offsetY: this.shadow.offsetY
          } : false
        };
      };

      return DisplayObject;

    })(AbstractObject);
  });

}).call(this);
