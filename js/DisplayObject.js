// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(["AbstractObject"], function(AbstractObject) {
    var DisplayObject;
    return DisplayObject = (function(superClass) {
      extend(DisplayObject, superClass);

      function DisplayObject(options) {
        DisplayObject.__super__.constructor.call(this, options);
        this.name = options.name || "";
        this.type = "DisplayObject";
        if (this.context == null) {
          this.context = this.parent.context;
        }
      }

      DisplayObject.prototype.testPoint = function(pointX, pointY) {
        var imageData, offsetX, offsetY, pixelData, rect;
        rect = this.canvas != null ? this.canvas.getBoundingClientRect() : this.parent.canvas.getBoundingClientRect();
        offsetX = pointX - rect.left;
        offsetY = pointY - rect.top;
        imageData = this.context.getImageData(offsetX, offsetY, 1, 1);
        pixelData = imageData.data;
        if (pixelData.every == null) {
          pixelData.every = Array.prototype.every;
        }
        return !pixelData.every(function(value) {
          return value === 0;
        });
      };

      DisplayObject.prototype.testRect = function(pointX, pointY) {
        var rect;
        if (this.canvas == null) {
          rect = this.parent.canvas.getBoundingClientRect();
          rect = {
            left: rect.left + this.position[0],
            top: rect.top + this.position[1],
            right: rect.left + this.position[0] + this.size[0],
            bottom: rect.top + this.position[1] + this.size[1]
          };
        } else {
          rect = this.canvas.getBoundingClientRect();
        }
        return (pointX >= rect.left) && (pointX <= rect.right) && (pointY >= rect.top) && (pointY <= rect.bottom);
      };

      DisplayObject.prototype.animate = function() {
        if (!this.visible) {
          this.needAnimation = false;
          return;
        }
        this.context.save();
        this._deltaX = this.position[0];
        this._deltaY = this.position[1];
        if (this.shadow) {
          this.context.shadowColor = this.shadow.color;
          this.context.shadowBlur = this.shadow.blur;
          this.context.shadowOffsetX = Math.max(this.shadow.offsetX, this.shadow.offset);
          this.context.shadowOffsetY = Math.max(this.shadow.offsetY, this.shadow.offset);
        }
        if (this.scale[0] !== 1 || this.scale[1] !== 1) {
          this.context.scale(this.scale[0], this.scale[1]);
        }
        if (this.rotation !== 0) {
          this.context.translate(this.center[0] + this.position[0], this.center[1] + this.position[1]);
          this.context.rotate(this.deg2rad(this.rotation));
          this._deltaX = -this.center[0];
          this._deltaY = -this.center[1];
        }
        return this.needAnimation = false;
      };

      return DisplayObject;

    })(AbstractObject);
  });

}).call(this);
