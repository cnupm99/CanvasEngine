// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  define(function() {
    var ProgressBar;
    return ProgressBar = (function() {
      function ProgressBar(options) {
        var colors, scene, strokeCaption;
        scene = options.scene;
        if (!scene) {
          return false;
        }
        this._position = options.position || [0, 0];
        this._sizes = options.sizes || [300, 50];
        this._padding = options.padding || 3;
        this._graph = scene.add({
          type: "graph",
          position: this._position
        });
        colors = options.colors || {};
        this._colors = {
          backgroundColor: colors.backgroundColor || ["#C3BD73", "#DCD9A2"],
          backgroundShadowColor: colors.backgroundShadowColor || "#FFF",
          strokeColor: colors.strokeColor || "#000",
          progress25: colors.progress25 || ["#f27011", "#E36102"],
          progress50: colors.progress50 || ["#f2b01e", "#E3A10F"],
          progress75: colors.progress75 || ["#f2d31b", "#E3C40C"],
          progress100: colors.progress100 || ["#86e01e", "#67C000"],
          progressShadowColor: colors.progressShadowColor || "#000",
          caption: colors.caption || "#B22222",
          captionStroke: colors.captionStroke || "#A11111"
        };
        this._rounded = options.rounded != null ? options.rounded : true;
        this._radius = options.radius || 5;
        this._showCaption = options.showCaption != null ? options.showCaption : false;
        this._showProgress = options.showProgress != null ? options.showProgress : true;
        this._caption = options.caption || "Progress: ";
        strokeCaption = options.strokeCaption != null ? options.strokeCaption : true;
        if (this._showCaption || this._showProgress) {
          this._text = scene.add({
            type: "text",
            font: options.font || "24px Arial",
            fillStyle: this._colors.caption,
            strokeStyle: strokeCaption ? this._colors.captionStroke : false,
            position: this._position
          });
        }
        this._minValue = options.minValue || 0;
        this._maxValue = options.maxValue || 100;
        this._progress = options.progress || 0;
        this._value = options.value || 0;
        if (this._progress > 0) {
          this.progress(this._progress);
        } else if (this._value > 0) {
          this.value(this._value);
        }
      }

      ProgressBar.prototype.setValues = function(min, max) {
        if (min >= max) {
          return false;
        }
        this._minValue = min;
        this._maxValue = max;
        return this._animate();
      };

      ProgressBar.prototype.progress = function(progress) {
        this._progress = progress;
        this._value = progress * this._maxValue / 100;
        this._drawProgress = true;
        return this._animate();
      };

      ProgressBar.prototype.value = function(value) {
        this._value = value;
        this._progress = Math.floor(value * 100 / this._maxValue);
        this._drawProgress = false;
        return this._animate();
      };

      ProgressBar.prototype.getProgress = function() {
        return this._progress;
      };

      ProgressBar.prototype.getValue = function() {
        return this._value;
      };

      ProgressBar.prototype._animate = function() {
        var color, size, text;
        this._graph.clear();
        this._graph.setShadow({
          color: this._colors.backgroundShadowColor,
          blur: 3,
          offset: 0
        });
        this._graph.linearGradient(0, 0, 0, this._sizes[1], [[0, this._colors.backgroundColor[0]], [0.5, this._colors.backgroundColor[1]], [1, this._colors.backgroundColor[0]]]);
        this._graph.strokeStyle(this._colors.strokeColor);
        this._graph.lineWidth(1);
        this._graph.rect(0, 0, this._sizes[0], this._sizes[1], this._radius);
        this._graph.fill();
        this._graph.stroke();
        if (this._progress <= 25) {
          color = this._colors.progress25;
        } else if (this._progress <= 50) {
          color = this._colors.progress50;
        } else if (this._progress <= 75) {
          color = this._colors.progress75;
        } else {
          color = this._colors.progress100;
        }
        size = Math.floor((this._sizes[0] - this._padding * 2) * this._value / this._maxValue);
        this._graph.setShadow({
          color: this._colors.progressShadowColor,
          blur: 3,
          offset: 0
        });
        this._graph.linearGradient(this._padding, this._padding, this._padding, this._sizes[1] - this._padding, [[0, color[0]], [0.5, color[1]], [1, color[0]]]);
        this._graph.rect(this._padding, this._padding, size, this._sizes[1] - this._padding * 2, this._radius);
        this._graph.fill();
        if (this._text != null) {
          text = "";
          if (this._showCaption) {
            text += this._caption;
          }
          if (this._showProgress) {
            text += this._drawProgress ? this._progress + "%" : this._value;
          }
          this._text.setText(text);
          return this._text.setPosition([this._position[0] + (this._sizes[0] - this._text.width) / 2, this._position[1] + (this._sizes[1] - this._text.fontHeight) / 2]);
        }
      };

      return ProgressBar;

    })();
  });

}).call(this);
