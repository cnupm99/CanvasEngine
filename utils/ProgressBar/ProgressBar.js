// Generated by CoffeeScript 2.0.2
(function() {
  "use strict";
  define(function() {
    var ProgressBar;
    
    // Доступные опции

    //  Общее:

    //  options = {

    //    scene: сцена для рисования
    //    minValue: минимальное значение
    //    maxValue: максимальное значение
    //    progress: прогресс или false
    //    value: текущее значение
    //    backgroundImage: картинка на фон, если нужна

    //  }

    //  Положение / размер:

    //  options = {

    //    position: позиция
    //    size: размер
    //    padding: расстояние от внешней границы до линии прогресса
    //    radius: радиус закругления углов или false

    //  }

    //  Опции цвета:

    //  options = {

    //    singleColor: нужно ли использовать разные цвета для отрисовки
    //      линии прогресса

    //    colors: {

    //		backgroundColor: цвет фона
    //		backgroundShadowColor: цвет тени фона
    //		strokeColor: цвет обводки фона
    //		progress: цвет линии прогресса
    //		  в случае, если singleColor == true
    //		progress25: цвет линии прогресса для прогресса меньше 25
    //		progress50: цвет линии прогресса для прогресса меньше 50
    //		progress75: цвет линии прогресса для прогресса меньше 75
    //		progress100: цвет линии прогресса для прогресса меньше 100
    //		progressShadowColor: цвет тени линии прогресса
    //		caption: цвет надписи
    //		captionStroke: цвет обводки надписи

    //    }

    //  }

    //  Опции надписи:

    //  options = {

    //    showCaption: нужно ли вообще выводить надпись
    //    showProgress: нужно ли показывать прогресс
    //    showTotal: нужно ли показывать общее количество, используется
    //      только при показе value
    //    caption: статичная надпись
    //    strokeCaption: нужна ли обводка надписи

    //  }

    return ProgressBar = class ProgressBar {
      constructor(options) {
        if (options.scene == null) {
          
          // сцена для рисования,
          // если ее нет, рисовать негде

          return false;
        }
        
        // опции размера, позиции и рисования

        this._sizeOptions(options);
        
        // установка цветовых опций

        this._colorOptions(options);
        
        // установка опций текста

        this._textOptions(options);
        
        // установка значений

        this._minValue = options.minValue || 0;
        this._maxValue = options.maxValue || 100;
        this._progress = options.progress != null ? options.progress : false;
        
        // начальное отображение

        if (this._progress) {
          this.progress(this._progress);
        } else {
          this._value = options.value || 0;
          this.value(this._value);
        }
      }

      
      // устанавливаем новые значения

      setValues(min = 0, max = 100) {
        if (min >= max) {
          return false;
        }
        this._minValue = min;
        this._maxValue = max;
        return this._animate();
      }

      
      // установка прогресса
      // или получение текущего прогресса

      progress(progress) {
        if (progress != null) {
          this._progress = progress;
          this._value = progress * this._maxValue / 100;
          this._drawProgress = true;
          this._animate();
        }
        return this._progress;
      }

      
      // установка значения
      // или получение текущего значения

      value(value) {
        if (value != null) {
          this._value = value;
          this._progress = Math.floor(value * 100 / this._maxValue);
          this._drawProgress = false;
          this._animate();
        }
        return this._value;
      }

      
      // текущий прогресс
      // оставим для обратной совместимости

      getProgress() {
        return this._progress;
      }

      
      // текущее значение
      // оставим для обратной совместимости

      getValue() {
        return this._value;
      }

      
      // Установка всяческих настроек из объекта options

      _sizeOptions(options) {
        // позиция
        this._position = options.position || [0, 0];
        // размеры
        this._size = options.size || [300, 50];
        // расстояние между внешней рамкой и линией прогресса
        if (!options.padding) {
          this._padding = [3, 3];
        } else {
          this._padding = Array.isArray(options.padding) ? options.padding : [options.padding, options.padding];
        }
        // радиус скругления углов, если 0 или null,
        // то скругления не будет
        this._radius = options.radius != null ? options.radius : 5;
        // если требуется картинка под фон, то создадим ее
        if (options.backgroundImage) {
          this._image = options.scene.add({
            type: "image",
            src: options.backgroundImage,
            position: this._position
          });
        }
        // или так
        if (options.from) {
          this._image = options.scene.add({
            type: "image",
            from: options.from,
            position: this._position
          });
        }
        // создаем класс для рисования
        return this._graph = options.scene.add({
          type: "graph",
          position: this._position
        });
      }

      _colorOptions(options) {
        var colors;
        colors = options.colors || {};
        this._singleColor = options.singleColor != null ? options.singleColor : false;
        return this._colors = {
          // цвет фона
          backgroundColor: colors.backgroundColor || ["#C3BD73", "#DCD9A2"],
          // цвет тени фона
          backgroundShadowColor: colors.backgroundShadowColor || "#FFF",
          // цвет обводки фона
          strokeColor: colors.strokeColor || "#000",
          // этот цвет используется в случае singleColor = true
          progress: colors.progress || ["#f27011", "#E36102"],
          // цвета линии прогресса для разных значений прогресса
          progress25: colors.progress25 || ["#f27011", "#E36102"],
          progress50: colors.progress50 || ["#f2b01e", "#E3A10F"],
          progress75: colors.progress75 || ["#f2d31b", "#E3C40C"],
          progress100: colors.progress100 || ["#86e01e", "#67C000"],
          // цвет тени линии прогресса
          progressShadowColor: colors.progressShadowColor || "#000",
          // цвет надписи
          caption: colors.caption || "#B22222",
          // цвет обводки надписи
          captionStroke: colors.captionStroke || "#A11111"
        };
      }

      _textOptions(options) {
        var strokeCaption;
        // нужно ли выводить подпись
        this._showCaption = options.showCaption != null ? options.showCaption : false;
        // нужно ли выводить значение прогресса
        this._showProgress = options.showProgress != null ? options.showProgress : true;
        // нужно ли показывать максимальное значение после текущего,
        // например так: 123 / 500
        // используется только при установке value
        this._showTotal = options.showTotal != null ? options.showTotal : true;
        // подпись
        this._caption = options.caption || "Progress: ";
        // нужна ли обводка текста
        strokeCaption = options.strokeCaption != null ? options.strokeCaption : true;
        // если выводить текст нужно, создаем класс для этого
        if (this._showCaption || this._showProgress) {
          return this._text = options.scene.add({
            type: "text",
            font: options.font || "24px Arial",
            fillStyle: this._colors.caption,
            strokeStyle: strokeCaption ? this._colors.captionStroke : false,
            position: this._position
          });
        }
      }

      
      // прорисовка

      _animate() {
        
        // очистка графики

        this._graph.clear();
        
        // рисуем фон

        this._animateBackground();
        
        // рисуем линию прогесса

        this._animateProgress();
        
        // обновляем текст

        return this._animateText();
      }

      _animateBackground() {
        // если в качестве фона используется картинка, то
        // прорисовка фона не нужна
        if (this._image != null) {
          return;
        }
        // тень
        this._graph.setShadow({
          color: this._colors.backgroundShadowColor,
          blur: 3,
          offset: 0
        });
        // градиент
        this._graph.linearGradient(0, 0, 0, this._size[1], [[0, this._colors.backgroundColor[0]], [0.5, this._colors.backgroundColor[1]], [1, this._colors.backgroundColor[0]]]);
        // линии
        this._graph.strokeStyle(this._colors.strokeColor);
        this._graph.lineWidth(1);
        // рисуем
        this._graph.rect(0, 0, this._size[0], this._size[1], this._radius);
        this._graph.fill();
        return this._graph.stroke();
      }

      _animateProgress() {
        var color, size;
        // выбор цвета
        if (this._singleColor) {
          color = this._colors.progress;
        } else if (this._progress <= 25) {
          color = this._colors.progress25;
        } else if (this._progress <= 50) {
          color = this._colors.progress50;
        } else if (this._progress <= 75) {
          color = this._colors.progress75;
        } else {
          color = this._colors.progress100;
        }
        // размер линии
        size = Math.floor((this._size[0] - this._padding[0] * 2) * this._value / this._maxValue);
        // тень
        this._graph.setShadow({
          color: this._colors.progressShadowColor,
          blur: 3,
          offset: 0
        });
        // градиент
        this._graph.linearGradient(this._padding[0], this._padding[1], this._padding[0], this._size[1] - this._padding[1], [[0, color[0]], [1, color[1]]]);
        // рисуем
        // вариант градиента со средним затемнением
        // [0.5, color[1]]
        // [1, color[0]]
        this._graph.rect(this._padding[0], this._padding[1], size, this._size[1] - this._padding[1] * 2, this._radius);
        return this._graph.fill();
      }

      _animateText() {
        var text;
        // нужен ли текст
        if (this._text != null) {
          // формируем текст
          text = "";
          if (this._showCaption) {
            text += this._caption;
          }
          if (this._showProgress) {
            if (this._drawProgress) {
              text += this._progress + "%";
            } else {
              text += this._value;
              if (this._showTotal) {
                // если нужно, выводим максимальное значение
                text += " / " + this._maxValue;
              }
            }
          }
          // установка текста
          this._text.write(text);
          // установка позиции
          return this._text.move([this._position[0] + (this._size[0] - this._text.textWidth) / 2, this._position[1] + (this._size[1] - this._text.fontHeight) / 2]);
        }
      }

    };
  });

}).call(this);
