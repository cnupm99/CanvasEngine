// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function() {
    var Dust;
    return Dust = (function() {
      function Dust(ce) {
        this._update = bind(this._update, this);
        this._ce = ce;
        this._assets = [];
        this._enabled = false;
      }

      Dust.prototype.add = function(options) {
        var _object, asset, delta, i, j, ref;
        asset = {};
        asset.scene = options.scene;
        if (!asset.scene) {
          return false;
        }
        this._setOptions(asset, options);
        asset.sprites = [];
        for (i = j = 0, ref = asset.count; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          _object = {};
          _object = {
            scale: this._percentRand(asset.beginScale, asset.scaleRand),
            speed: this._percentRand(asset.speed, asset.speedRand),
            rotationSpeed: this._coin() ? this._percentRand(asset.rotationSpeed, asset.rotationRand) : -this._percentRand(asset.rotationSpeed, asset.rotationRand),
            radius: 0
          };
          delta = this._rand(0, 360) / 180 * Math.PI;
          _object.deltaX = Math.cos(delta) * _object.speed;
          _object.deltaY = Math.sin(delta) * _object.speed;
          _object.scaleSpeed = (asset.endScale - _object.scale) / asset.endRadius * _object.speed;
          _object.alphaSpeed = 1 / (asset.hideRadius - asset.endRadius) * _object.speed;
          _object.sprite = asset.scene.add({
            type: "image",
            from: options.from,
            position: asset.position,
            rotation: this._rand(0, 360),
            anchor: [0.5, 0.5],
            size: [_object.scale * asset.from.width, _object.scale * asset.from.height],
            name: "" + Math.random()
          });
          asset.sprites.push(_object);
        }
        this._assets.push(asset);
        if (this._assets.length > 0 && !this._enabled) {
          this._ce.addEvent(this._update);
          return this._enabled = true;
        }
      };

      Dust.prototype._update = function() {
        if (this._assets.length === 0) {
          this._ce.removeEvent(this._update);
          this._enabled = false;
        }
        return this._assets.forEach((function(_this) {
          return function(asset, assetIndex) {
            asset.step++;
            if (asset.step % asset.slow !== 0) {
              return;
            }
            return asset.sprites.forEach(function(_object, _objectIndex) {
              _object.sprite.shift(_object.deltaX, _object.deltaY);
              _object.sprite.shift(0, asset.gravitation);
              asset.gravitation += 0.005;
              _object.scale += _object.scaleSpeed;
              _object.sprite.resize([_object.scale * asset.from.width, _object.scale * asset.from.height]);
              _object.sprite.rotateOn(_object.rotationSpeed);
              _object.radius += _object.speed;
              if (_object.radius > asset.endRadius) {
                _object.sprite.setAlpha(_object.alphaSpeed);
              }
              if (_object.radius > asset.hideRadius) {
                asset.scene.remove(_object.sprite.name);
                asset.sprites.splice(_objectIndex, 1);
                if (asset.sprites.length === 0) {
                  _this._assets.splice(assetIndex, 1);
                  return asset.scene.needAnimation = true;
                }
              }
            });
          };
        })(this));
      };

      Dust.prototype._coin = function() {
        return this._rand(0, 100) >= 50;
      };

      Dust.prototype._rand = function(from, to) {
        return from + (to - from) * Math.random();
      };

      Dust.prototype._perc = function(value, percent) {
        return value / 100 * percent;
      };

      Dust.prototype._percentRand = function(value, percent) {
        var percentValue;
        percentValue = this._perc(value, percent);
        return this._rand(value - percentValue, value + percentValue);
      };

      Dust.prototype._setOptions = function(asset, options) {
        asset.position = options.position || [0, 0];
        asset.count = options.count || 20;
        asset.from = options.from;
        if (!asset.from) {
          return false;
        }
        asset.beginScale = options.beginScale || 0.1;
        asset.endScale = options.endScale || 1;
        asset.scaleRand = options.scaleRand || 50;
        asset.endRadius = options.endRadius || 250;
        asset.hideRadius = options.hideRadius || 300;
        if (asset.hideRadius <= asset.endRadius) {
          asset.hideRadius = asset.endRadius + 20;
        }
        asset.speed = options.speed || 5;
        asset.speedRand = options.speedRand || 50;
        asset.gravitation = options.gravitation || 1;
        asset.rotationSpeed = options.rotationSpeed || 10;
        asset.rotationRand = options.rotationRand || 50;
        asset.slow = options.slow || 1;
        return asset.step = 0;
      };

      return Dust;

    })();
  });

}).call(this);
