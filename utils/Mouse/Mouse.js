// Generated by CoffeeScript 2.0.2
(function() {
  "use strict";
  define(function() {
    var Mouse;
    
    // Класс для добавления в CanvasEngine событий мыши

    return Mouse = class Mouse {
      
      // указываем родителя, на котором находится CanvasEngine

      constructor(parent) {
        
        // далее идет обработка событий мыши и их формирование

        this._mouseUp = this._mouseUp.bind(this);
        this._mouseDown = this._mouseDown.bind(this);
        this._mouseMove = this._mouseMove.bind(this);
        this._parent = parent || document.body;
        
        // список событий

        this._events = [];
        
        // включены ли слушатели

        this._enabled = false;
      }

      
      // добавляем событие
      // _object: CanvasEngine object - графический объект движка
      // _event: String - событие мыши, одно из: mousemove, mouseover, mouseout, mousedown, mouseup, click
      // func: Function - выполняемая функция
      // type: String - 
      // 	"rect" - сравнение по координатам
      // 	"point" - сравнение по точке
      // 	"both" - сначала по координатам, потом по точке

      add(_object, _event, func, type = "both") {
        var index;
        
        // проверяем нет ли уже такого события

        index = this._getIndex(_object, _event, func, type);
        if (index >= 0) {
          return false;
        }
        
        // добавляем

        this._events.push({
          object: _object,
          event: _event,
          func: func,
          // мышь над объектом
          mouseOn: false,
          // нажата клавиша над объектом
          mouseDown: false,
          type: type,
          
          // при pause = 0 пауза отключена
          // если pause > 0, то событие стоит на паузе
          // свойство нужно для временной приостановки событий
          // в случае появления модальных окон и проч.

          pause: 0
        });
        
        // если нужно, подключаем слушателей

        if (!this._enabled) {
          this._parent.addEventListener("mousemove", this._mouseMove);
          this._parent.addEventListener("mousedown", this._mouseDown);
          this._parent.addEventListener("mouseup", this._mouseUp);
          this._enabled = true;
        }
        return true;
      }

      
      // удаляем событие

      remove(_object, _event, func, type = "both") {
        var index;
        index = this._getIndex(_object, _event, func, type);
        if (index < 0) {
          return false;
        }
        this._events.splice(index, 1);
        
        // выключаем, если нет ни одного события

        if (this._events.length === 0) {
          this._parent.removeEventListener("mousemove", this._mouseMove);
          this._parent.removeEventListener("mousedown", this._mouseDown);
          this._parent.removeEventListener("mouseup", this._mouseUp);
          this._enabled = false;
        }
        return true;
      }

      
      // увеличиваем паузу всех добавленных событий,
      // то есть ставим их на паузу

      pauseUp() {
        return this._events.forEach(function(_event) {
          return _event.pause++;
        });
      }

      
      // уменьшаем паузу всех событий,
      // если у некоторых событий она становится равна 0,
      // то пауза с них снимается

      pauseDown() {
        return this._events.forEach(function(_event) {
          if (_event.pause > 0) {
            return _event.pause--;
          }
        });
      }

      
      // выключает паузу у всех событий

      pauseOff() {
        return this._events.forEach(function(_event) {
          return _event.pause = 0;
        });
      }

      
      // установка курсора
      // style: String, одно из pointer, default и т.п.

      setCursor(style) {
        return this._parent.style.cursor = style;
      }

      
      // возвращает индекс события в массиве

      _getIndex(_object, _event, func, type = "both") {
        var index;
        index = -1;
        this._events.some((e, i) => {
          if (e.object === _object && e.event === _event && e.func === func && e.type === type) {
            index = i;
            return true;
          }
          return false;
        });
        return index;
      }

      _mouseUp(e) {
        return this._events.forEach(function(_event) {
          
          // не обрабатываем, если событие на паузе

          if (_event.pause > 0) {
            return;
          }
          
          // невозвомжно взаимодействовать с невидимыми объектами

          if (!_event.object.visible) {
            return;
          }
          if (_event.mouseOn && _event.event === "mouseup") {
            
            // формируем событие mouseup

            _event.func(e, _event.object);
          }
          if (_event.mouseOn && _event.mouseDown && _event.event === "click") {
            
            // клик формируем сами,
            // если нажали и отпустили над объектом

            _event.func(e, _event.object);
          }
          
          // даже если мышь не над объектом

          return _event.mouseDown = false;
        });
      }

      _mouseDown(e) {
        return this._events.forEach((_event) => {
          
          // не обрабатываем, если событие на паузе

          if (_event.pause > 0) {
            return;
          }
          
          // невозвомжно взаимодействовать с невидимыми объектами

          if (!_event.object.visible) {
            return;
          }
          
          // проверем где мышь

          _event.mouseOn = this._getMouseOn(e.pageX, e.pageY, _event.object, _event.type);
          if (_event.mouseOn) {
            if (_event.event === "mousedown") {
              
              // формируем событие mousedown

              _event.func(e, _event.object);
            }
            
            // только если мышь над объектом

            return _event.mouseDown = true;
          }
        });
      }

      _mouseMove(e) {
        return this._events.forEach((_event) => {
          var mouseOn;
          
          // не обрабатываем, если событие на паузе

          if (_event.pause > 0) {
            return;
          }
          
          // невозвомжно взаимодействовать с невидимыми объектами

          if (!_event.object.visible) {
            return;
          }
          
          // проверяем, где мышь

          mouseOn = this._getMouseOn(e.pageX, e.pageY, _event.object, _event.type);
          if (mouseOn && _event.event === "mousemove") {
            
            // формируем событие mousemove

            _event.func(e, _event.object);
          }
          if (mouseOn && !_event.mouseOn && _event.event === "mouseover") {
            
            // формируем событие mouseover

            _event.func(e, _event.object);
          }
          if (!mouseOn && _event.mouseOn && _event.event === "mouseout") {
            
            // формируем событие mouseout

            _event.func(e, _event.object);
          }
          
          // запоминаем состояние

          return _event.mouseOn = mouseOn;
        });
      }

      _getMouseOn(x, y, _object, type) {
        var mouseOn;
        
        // здесь мы проверяем, над объектом ли мышь,
        // используя нужный метод объекта

        mouseOn = false;
        switch (type) {
          case "rect":
            mouseOn = _object.testRect(x, y);
            break;
          case "point":
            mouseOn = _object.testPoint(x, y);
            break;
          case "both":
            mouseOn = _object.testRect(x, y) && _object.testPoint(x, y);
        }
        return mouseOn;
      }

    };
  });

}).call(this);
