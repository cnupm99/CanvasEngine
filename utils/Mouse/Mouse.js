// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function() {
    var Mouse;
    return Mouse = (function() {
      function Mouse(parent) {
        this._mouseMove = bind(this._mouseMove, this);
        this._mouseDown = bind(this._mouseDown, this);
        this._mouseUp = bind(this._mouseUp, this);
        this._parent = parent || document.body;
        this._events = [];
        this._enabled = false;
      }

      Mouse.prototype.add = function(_object, _event, func, realTest) {
        var index;
        if (realTest == null) {
          realTest = false;
        }
        index = this._getIndex(_object, _event, func, realTest);
        if (index >= 0) {
          return true;
        }
        this._events.push({
          object: _object,
          event: _event,
          func: func,
          mouseOn: false,
          mouseDown: false,
          realTest: realTest
        });
        if (!this._enabled) {
          this._parent.addEventListener("mousemove", this._mouseMove);
          this._parent.addEventListener("mousedown", this._mouseDown);
          this._parent.addEventListener("mouseup", this._mouseUp);
          return this._enabled = true;
        }
      };

      Mouse.prototype.remove = function(_object, _event, func, realTest) {
        var index;
        if (realTest == null) {
          realTest = false;
        }
        index = this._getIndex(_object, _event, func, realTest);
        if (index < 0) {
          return false;
        }
        this._events.splice(index, 1);
        if (this._events.length === 0) {
          this._parent.removeEventListener("mousemove", this._mouseMove);
          this._parent.removeEventListener("mousedown", this._mouseDown);
          this._parent.removeEventListener("mouseup", this._mouseUp);
          return this._enabled = false;
        }
      };

      Mouse.prototype.setCursor = function(style) {
        return this._parent.style.cursor = style;
      };

      Mouse.prototype._getIndex = function(_object, _event, func, realTest) {
        var index;
        if (realTest == null) {
          realTest = false;
        }
        index = -1;
        this._events.some((function(_this) {
          return function(e, i) {
            if (e.object === _object && e.event === _event && e.func === func && e.realTest === realTest) {
              index = i;
              return true;
            }
            return false;
          };
        })(this));
        return index;
      };

      Mouse.prototype._mouseUp = function(e) {
        return this._events.forEach(function(_event) {
          if (_event.mouseOn && _event.event === "mouseup") {
            _event.func(e, _event.object);
          }
          if (_event.mouseOn && _event.mouseDown && _event.event === "click") {
            _event.func(e, _event.object);
          }
          return _event.mouseDown = false;
        });
      };

      Mouse.prototype._mouseDown = function(e) {
        return this._events.forEach(function(_event) {
          if (_event.mouseOn) {
            if (_event.event === "mousedown") {
              _event.func(e, _event.object);
            }
            return _event.mouseDown = true;
          }
        });
      };

      Mouse.prototype._mouseMove = function(e) {
        return this._events.forEach(function(_event) {
          var mouseOn;
          mouseOn = _event.realTest ? _event.object.testPoint(e.pageX, e.pageY) : _event.object.testRect(e.pageX, e.pageY);
          if (mouseOn && _event.event === "mousemove") {
            _event.func(e, _event.object);
          }
          if (mouseOn && !_event.mouseOn && _event.event === "mouseover") {
            _event.func(e, _event.object);
          }
          if (!mouseOn && _event.mouseOn && _event.event === "mouseout") {
            _event.func(e, _event.object);
          }
          return _event.mouseOn = mouseOn;
        });
      };

      return Mouse;

    })();
  });

}).call(this);
