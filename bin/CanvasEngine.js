// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(function() {
    var AbstractObject, CanvasEngine, ContainerObject, DisplayObject, Graph, Image, Scene, Text, TilingImage;
    AbstractObject = (function() {
      function AbstractObject(options) {
        if (options == null) {
          options = {};
        }
      }

      AbstractObject.prototype.point = function(value1, value2) {
        if (value1 == null) {
          return [0, 0];
        }
        if (value2 != null) {
          return [this.number(value1), this.number(value2)];
        }
        if (Array.isArray(value1)) {
          return [this.number(value1[0]), this.number(value1[1])];
        } else {
          if ((value1.x != null) && (value1.y != null)) {
            return [this.number(value1.x), this.number(value1.y)];
          }
          if ((value1.width != null) && (value1.height != null)) {
            return [this.number(value1.width), this.number(value1.height)];
          }
          return [0, 0];
        }
      };

      AbstractObject.prototype.pixel = function(value1, value2) {
        var result;
        result = this.point(value1, value2);
        return [result[0] >> 0, result[1] >> 0];
      };

      AbstractObject.prototype.int = function(value) {
        return this.number(value) >> 0;
      };

      AbstractObject.prototype.number = function(value) {
        if (value != null) {
          return +value;
        } else {
          return 0;
        }
      };

      AbstractObject.prototype.deg2rad = function(value) {
        return this.number(value) * this._PIDIV180;
      };

      AbstractObject.prototype._PIDIV180 = Math.PI / 180;

      return AbstractObject;

    })();
    DisplayObject = (function(superClass) {
      extend(DisplayObject, superClass);

      function DisplayObject(options) {
        DisplayObject.__super__.constructor.call(this, options);
        this.name = options.name || "";
        this.type = "DisplayObject";
        if (!this.canvas) {
          this.canvas = options.canvas;
        }
        if (!this.context) {
          this.context = options.context;
        }
        this._setProperties(options);
      }

      DisplayObject.prototype.set = function(options) {
        if (options == null) {
          return;
        }
        if (options.visible != null) {
          this.visible = options.visible;
        }
        if (this.visible) {
          this.show();
        } else {
          this.hide();
        }
        if (options.position != null) {
          this.move(options.position);
        }
        if (options.size != null) {
          this.resize(options.size);
        }
        if (options.realSize != null) {
          this.upsize(options.realSize);
        }
        if (options.center != null) {
          this.setCenter(options.center);
        }
        if (options.anchor != null) {
          this.setAnchor(options.anchor);
        }
        if (options.scale != null) {
          this.zoom(options.scale);
        }
        if (options.rotation != null) {
          this.rotate(options.rotation);
        }
        if (options.alpha != null) {
          this.setAlpha(options.alpha);
        }
        if (options.shadow != null) {
          this.setShadow(options.shadow);
        }
        return this.needAnimation = true;
      };

      DisplayObject.prototype.show = function() {
        this.visible = true;
        this.needAnimation = true;
        return true;
      };

      DisplayObject.prototype.hide = function() {
        this.visible = false;
        this.needAnimation = true;
        return false;
      };

      DisplayObject.prototype.move = function(value1, value2) {
        this.position = this.pixel(value1, value2);
        this.needAnimation = true;
        return this.position;
      };

      DisplayObject.prototype.shift = function(value1, value2) {
        if (value2 == null) {
          value2 = 0;
        }
        return this.move([value1 + this.position[0], value2 + this.position[1]]);
      };

      DisplayObject.prototype.resize = function(value1, value2) {
        this.size = this.pixel(value1, value2);
        this.setAnchor(this.anchor);
        this.needAnimation = true;
        return this.size;
      };

      DisplayObject.prototype.upsize = function(value1, value2) {
        this.realSize = this.pixel(value1, value2);
        this.setAnchor(this.anchor);
        return this.realSize;
      };

      DisplayObject.prototype.setCenter = function(value1, value2) {
        var anchorX, anchorY, size;
        this.center = this.pixel(value1, value2);
        size = this.size[0] === 0 && this.size[1] === 0 ? this.realSize : this.size;
        anchorX = size[0] === 0 ? 0 : this.center[0] / size[0];
        anchorY = size[1] === 0 ? 0 : this.center[1] / size[1];
        this.anchor = [anchorX, anchorY];
        this.needAnimation = true;
        return this.center;
      };

      DisplayObject.prototype.setAnchor = function(value1, value2) {
        var size;
        this.anchor = this.point(value1, value2);
        size = this.size[0] === 0 && this.size[1] === 0 ? this.realSize : this.size;
        this.center = [this.int(size[0] * this.anchor[0]), this.int(size[1] * this.anchor[1])];
        this.needAnimation = true;
        return this.anchor;
      };

      DisplayObject.prototype.zoom = function(value1, value2) {
        this.scale = value1 != null ? this.point(value1, value2) : [1, 1];
        this.needAnimation = true;
        return this.scale;
      };

      DisplayObject.prototype.rotate = function(value) {
        this.rotation = this.int(value);
        if (this.rotation < 0) {
          this.rotation = 360 + this.rotation;
        }
        if (this.rotation >= 360) {
          this.rotation = this.rotation % 360;
        }
        this._rotation = this.rotation * this._PIDIV180;
        this.needAnimation = true;
        return this.rotation;
      };

      DisplayObject.prototype.rotateOn = function(value) {
        return this.rotate(this.rotation + this.int(value));
      };

      DisplayObject.prototype.setAlpha = function(value) {
        this.alpha = value ? this.number(value) : 1;
        if (this.alpha < 0) {
          this.alpha = 0;
        }
        if (this.alpha > 1) {
          this.alpha = 1;
        }
        this.needAnimation = true;
        return this.alpha;
      };

      DisplayObject.prototype.setShadow = function(value) {
        if ((value == null) || (!value)) {
          this.shadow = false;
        } else {
          this.shadow = {
            color: value.color || "#000",
            blur: value.blur || 3,
            offsetX: this.int(value.offsetX),
            offsetY: this.int(value.offsetY),
            offset: this.int(value.offset)
          };
        }
        this.needAnimation = true;
        return this.shadow;
      };

      DisplayObject.prototype.testPoint = function(pointX, pointY) {
        var imageData, offsetX, offsetY, pixelData, rect;
        rect = this.canvas.getBoundingClientRect();
        offsetX = pointX - rect.left;
        offsetY = pointY - rect.top;
        imageData = this.context.getImageData(offsetX, offsetY, 1, 1);
        pixelData = imageData.data;
        if (pixelData.every == null) {
          pixelData.every = Array.prototype.every;
        }
        return !pixelData.every(function(value) {
          return value === 0;
        });
      };

      DisplayObject.prototype.testRect = function(pointX, pointY) {
        var rect;
        rect = this.canvas.getBoundingClientRect();
        if (this.type !== "scene") {
          rect = {
            left: rect.left + this.position[0],
            top: rect.top + this.position[1],
            right: rect.left + this.position[0] + this.size[0],
            bottom: rect.top + this.position[1] + this.size[1]
          };
        }
        return (pointX >= rect.left) && (pointX <= rect.right) && (pointY >= rect.top) && (pointY <= rect.bottom);
      };

      DisplayObject.prototype.animate = function() {
        this._deltaX = this.position[0];
        this._deltaY = this.position[1];
        if (this.shadow) {
          this.context.shadowColor = this.shadow.color;
          this.context.shadowBlur = this.shadow.blur;
          this.context.shadowOffsetX = Math.max(this.shadow.offsetX, this.shadow.offset);
          this.context.shadowOffsetY = Math.max(this.shadow.offsetY, this.shadow.offset);
        }
        if (this.scale[0] !== 1 || this.scale[1] !== 1) {
          this.context.scale(this.scale[0], this.scale[1]);
        }
        if (this.alpha !== 1) {
          this.context.globalAlpha = this.alpha;
        }
        if (this.rotation !== 0) {
          this.context.translate(this.center[0] + this.position[0], this.center[1] + this.position[1]);
          this.context.rotate(this._rotation);
          this._deltaX = -this.center[0];
          this._deltaY = -this.center[1];
        }
        return this.needAnimation = false;
      };

      DisplayObject.prototype._setProperties = function(options) {
        this.visible = options.visible != null ? options.visible : true;
        if (this.visible) {
          this.show();
        } else {
          this.hide();
        }
        this.move(options.position);
        this.realSize = [0, 0];
        this.resize(options.size);
        if ((options.center != null) || (options.anchor == null)) {
          this.setCenter(options.center);
        }
        if ((options.anchor != null) && (options.center == null)) {
          this.setAnchor(options.anchor);
        }
        this.zoom(options.scale);
        this.rotate(options.rotation);
        this.setAlpha(options.alpha);
        this.setShadow(options.shadow);
        return this.needAnimation = true;
      };

      return DisplayObject;

    })(AbstractObject);
    ContainerObject = (function(superClass) {
      extend(ContainerObject, superClass);

      function ContainerObject(options) {
        ContainerObject.__super__.constructor.call(this, options);
        this.childrens = [];
      }

      ContainerObject.prototype.get = function(childName) {
        var index;
        index = this.index(childName);
        if (index === -1) {
          return false;
        }
        return this.childrens[index];
      };

      ContainerObject.prototype.remove = function(childName) {
        var index;
        index = this.index(childName);
        if (index === -1) {
          return false;
        }
        this.childrens.splice(index, 1);
        return true;
      };

      ContainerObject.prototype.rename = function(oldName, newName) {
        var index;
        index = this.index(oldName);
        if (index === -1) {
          return false;
        }
        this.childrens[index].name = newName;
        return true;
      };

      ContainerObject.prototype.index = function(childName) {
        var result;
        result = -1;
        this.childrens.some(function(child, index) {
          var flag;
          flag = child.name === childName;
          if (flag) {
            result = index;
          }
          return flag;
        });
        return result;
      };

      return ContainerObject;

    })(DisplayObject);
    Graph = (function(superClass) {
      extend(Graph, superClass);

      function Graph(options) {
        Graph.__super__.constructor.call(this, options);
        this._commands = [];
      }

      Graph.prototype.clear = function() {
        this._commands = [];
        return this.needAnimation = true;
      };

      Graph.prototype.beginPath = function() {
        return this._commands.push({
          "command": "beginPath"
        });
      };

      Graph.prototype.lineCap = function(value) {
        return this._commands.push({
          "command": "lineCap",
          "lineCap": value
        });
      };

      Graph.prototype.strokeStyle = function(style) {
        return this._commands.push({
          "command": "strokeStyle",
          "style": style
        });
      };

      Graph.prototype.fillStyle = function(style) {
        return this._commands.push({
          "command": "fillStyle",
          "style": style
        });
      };

      Graph.prototype.linearGradient = function(x1, y1, x2, y2, colors) {
        return this._commands.push({
          "command": "gradient",
          "point1": this.pixel(x1, y1),
          "point2": this.pixel(x2, y2),
          "colors": colors
        });
      };

      Graph.prototype.lineWidth = function(width) {
        return this._commands.push({
          "command": "lineWidth",
          "width": this.int(width)
        });
      };

      Graph.prototype.setLineDash = function(dash) {
        return this._commands.push({
          "command": "setDash",
          "dash": dash
        });
      };

      Graph.prototype.lineDashOffset = function(offset) {
        return this._commands.push({
          "command": "dashOffset",
          "offset": this.int(offset)
        });
      };

      Graph.prototype.moveTo = function(toX, toY) {
        return this._commands.push({
          "command": "moveTo",
          "point": this.pixel(toX, toY)
        });
      };

      Graph.prototype.lineTo = function(toX, toY) {
        this._commands.push({
          "command": "lineTo",
          "point": this.pixel(toX, toY)
        });
        return this.needAnimation = true;
      };

      Graph.prototype.line = function(fromX, fromY, toX, toY) {
        this._commands.push({
          "command": "line",
          "from": this.pixel(fromX, fromY),
          "to": this.pixel(toX, toY)
        });
        return this.needAnimation = true;
      };

      Graph.prototype.rect = function(fromX, fromY, width, height, radius) {
        if (radius == null) {
          radius = 0;
        }
        this._commands.push({
          "command": "rect",
          "point": this.pixel(fromX, fromY),
          "size": this.pixel(width, height),
          "radius": this.int(radius)
        });
        return this.needAnimation = true;
      };

      Graph.prototype.polyline = function(points, stroke) {
        if (stroke == null) {
          stroke = true;
        }
        this._commands.push({
          "command": "beginPath"
        });
        this.moveTo(points[0][0], points[0][1]);
        points.forEach((function(_this) {
          return function(point) {
            return _this.lineTo(point[0], point[1]);
          };
        })(this));
        if (stroke) {
          this.stroke();
        }
        return this.needAnimation = true;
      };

      Graph.prototype.polygon = function(points) {
        this.polyline(points, false);
        this.lineTo(points[0][0], points[0][1]);
        this.stroke();
        return this.fill();
      };

      Graph.prototype.fill = function() {
        this._commands.push({
          "command": "fill"
        });
        return this.needAnimation = true;
      };

      Graph.prototype.stroke = function() {
        this._commands.push({
          "command": "stroke"
        });
        return this.needAnimation = true;
      };

      Graph.prototype.animate = function() {
        Graph.__super__.animate.call(this);
        this.context.lineCap = "round";
        return this._commands.forEach((function(_this) {
          return function(command) {
            var gradient;
            switch (command.command) {
              case "beginPath":
                return _this.context.beginPath();
              case "lineCap":
                return _this.context.lineCap = command.lineCap;
              case "stroke":
                return _this.context.stroke();
              case "fill":
                return _this.context.fill();
              case "setDash":
                return _this.context.setLineDash(command.dash);
              case "dashOffset":
                return _this.context.lineDashOffset = command.offset;
              case "moveTo":
                return _this.context.moveTo(command.point[0] + _this._deltaX, command.point[1] + _this._deltaY);
              case "lineTo":
                return _this.context.lineTo(command.point[0] + _this._deltaX, command.point[1] + _this._deltaY);
              case "line":
                _this.context.beginPath();
                _this.context.moveTo(command.from[0] + _this._deltaX, command.from[1] + _this._deltaY);
                _this.context.lineTo(command.to[0] + _this._deltaX, command.to[1] + _this._deltaY);
                return _this.context.stroke();
              case "strokeStyle":
                return _this.context.strokeStyle = command.style;
              case "fillStyle":
                return _this.context.fillStyle = command.style;
              case "lineWidth":
                return _this.context.lineWidth = command.width;
              case "rect":
                _this.context.beginPath();
                if (command.radius === 0) {
                  return _this.context.rect(command.point[0] + _this._deltaX, command.point[1] + _this._deltaY, command.size[0], command.size[1]);
                } else {
                  return _this._drawRoundedRect(_this.context, command.point[0] + _this._deltaX, command.point[1] + _this._deltaY, command.size[0], command.size[1], command.radius);
                }
                break;
              case "gradient":
                gradient = _this.context.createLinearGradient(command.point1[0] + _this._deltaX, command.point1[1] + _this._deltaY, command.point2[0] + _this._deltaX, command.point2[1] + _this._deltaY);
                command.colors.forEach(function(color) {
                  return gradient.addColorStop(color[0], color[1]);
                });
                return _this.context.fillStyle = gradient;
            }
          };
        })(this));
      };

      Graph.prototype.log = function() {
        return console.log(this._commands);
      };

      Graph.prototype._drawRoundedRect = function(context, x, y, width, height, radius) {
        var halfpi, pi, x1, x2, y1, y2;
        pi = Math.PI;
        halfpi = pi / 2;
        x1 = x + radius;
        x2 = x + width - radius;
        y1 = y + radius;
        y2 = y + height - radius;
        context.moveTo(x1, y);
        context.lineTo(x2, y);
        context.arc(x2, y1, radius, -halfpi, 0);
        context.lineTo(x + width, y2);
        context.arc(x2, y2, radius, 0, halfpi);
        context.lineTo(x1, y + height);
        context.arc(x1, y2, radius, halfpi, pi);
        context.lineTo(x, y1);
        return context.arc(x1, y1, radius, pi, 3 * halfpi);
      };

      return Graph;

    })(DisplayObject);
    Image = (function(superClass) {
      extend(Image, superClass);

      function Image(options) {
        this._imageOnLoad = bind(this._imageOnLoad, this);
        Image.__super__.constructor.call(this, options);
        this.type = "image";
        this.onload = options.onload;
        this.loaded = false;
        this.image = document.createElement("img");
        this.image.onload = this._imageOnLoad;
        this.loadedFrom = "";
        if (options.src != null) {
          this.src(options.src);
        } else {
          this.from(options.from);
        }
      }

      Image.prototype.src = function(value) {
        this.loaded = false;
        this.loadedFrom = value;
        return this.image.src = value;
      };

      Image.prototype.from = function(from, src) {
        if (from == null) {
          return;
        }
        this.image = from;
        this.loadedFrom = src || "";
        this.upsize([this.image.width, this.image.height]);
        if (this.size[0] <= 0 || this.size[1] <= 0) {
          this.resize(this.realSize);
        }
        this.loaded = true;
        return this.needAnimation = true;
      };

      Image.prototype.animate = function() {
        if (!this.loaded) {
          return;
        }
        Image.__super__.animate.call(this);
        if (this.size[0] === this.realSize[0] && this.size[1] === this.realSize[1]) {
          return this.context.drawImage(this.image, this._deltaX, this._deltaY);
        } else {
          return this.context.drawImage(this.image, this._deltaX, this._deltaY, this.size[0], this.size[1]);
        }
      };

      Image.prototype._imageOnLoad = function(e) {
        this.upsize([this.image.width, this.image.height]);
        if (this.size[0] <= 0 || this.size[1] <= 0) {
          this.resize(this.realSize);
        }
        this.loaded = true;
        this.needAnimation = true;
        if (this.onload != null) {
          return this.onload(this.realSize);
        }
      };

      return Image;

    })(DisplayObject);
    Text = (function(superClass) {
      extend(Text, superClass);

      function Text(options) {
        Text.__super__.constructor.call(this, options);
        this.fontHeight = 0;
        this.textWidth = 0;
        this.setFont(options.font);
        this.setFillStyle(options.fillStyle);
        this.setStrokeStyle(options.strokeStyle);
        this.setStrokeWidth(options.strokeWidth);
        this.write(options.text);
      }

      Text.prototype.setFont = function(value) {
        this.font = value || "12px Arial";
        this.fontHeight = this._getFontHeight(this.font);
        this.needAnimation = true;
        return this.font;
      };

      Text.prototype.setFillStyle = function(value) {
        this.fillStyle = value || false;
        this.needAnimation = true;
        return this.fillStyle;
      };

      Text.prototype.setStrokeStyle = function(value) {
        this.strokeStyle = value || false;
        this.needAnimation = true;
        return this.strokeStyle;
      };

      Text.prototype.setStrokeWidth = function(value) {
        this.strokeWidth = value != null ? this.int(value) : 1;
        this.needAnimation = true;
        return this.strokeWidth;
      };

      Text.prototype.write = function(value) {
        this.text = value || "";
        this.upsize(this._getRealSizes(this.text));
        this.textWidth = this.realSize[0];
        this.textHeight = this.realSize[1];
        this.needAnimation = true;
        return this.text;
      };

      Text.prototype.animate = function() {
        var gradient, lines, textY;
        Text.__super__.animate.call(this);
        this.context.font = this.font;
        this.context.textBaseline = "top";
        if (this.fillStyle) {
          if (Array.isArray(this.fillStyle)) {
            gradient = this.context.createLinearGradient(this._deltaX, this._deltaY, this._deltaX, this._deltaY + this.fontHeight);
            this.fillStyle.forEach(function(color) {
              return gradient.addColorStop(color[0], color[1]);
            });
            this.context.fillStyle = gradient;
          } else {
            this.context.fillStyle = this.fillStyle;
          }
        }
        if (this.strokeStyle) {
          this.context.strokeStyle = this.strokeStyle;
          this.context.lineWidth = this.strokeWidth;
        }
        lines = this.text.split("\n");
        textY = this._deltaY;
        return lines.forEach((function(_this) {
          return function(line) {
            if (_this.fillStyle) {
              _this.context.fillText(line, _this._deltaX, textY);
            }
            if (_this.strokeStyle) {
              _this.context.strokeText(line, _this._deltaX, textY);
            }
            return textY += _this.fontHeight;
          };
        })(this));
      };

      Text.prototype._getFontHeight = function(font) {
        var fontHeight, span;
        span = document.createElement("span");
        span.appendChild(document.createTextNode("height"));
        span.style.cssText = "font: " + font + "; white-space: nowrap; display: inline;";
        document.body.appendChild(span);
        fontHeight = span.offsetHeight;
        document.body.removeChild(span);
        return fontHeight;
      };

      Text.prototype._getTextWidth = function(text) {
        var textWidth;
        this.context.save();
        this.context.font = this.font;
        textWidth = this.context.measureText(text).width;
        this.context.restore();
        return textWidth;
      };

      Text.prototype._getRealSizes = function(text) {
        var lines, maxWidth;
        maxWidth = 0;
        lines = this.text.split("\n");
        lines.forEach((function(_this) {
          return function(line) {
            var width;
            width = _this._getTextWidth(line);
            if (width > maxWidth) {
              return maxWidth = width;
            }
          };
        })(this));
        return [maxWidth, lines.length * this.fontHeight];
      };

      return Text;

    })(DisplayObject);
    TilingImage = (function(superClass) {
      extend(TilingImage, superClass);

      function TilingImage(options) {
        TilingImage.__super__.constructor.call(this, options);
        this.setRect(options.rect);
      }

      TilingImage.prototype.setRect = function(value) {
        this.rect = value || [0, 0, this.canvas.width, this.canvas.height];
        this.needAnimation = true;
        return this.rect;
      };

      TilingImage.prototype.animate = function() {
        if (!this.loaded) {
          return;
        }
        this.context.beginPath();
        this.context.fillStyle = this.context.createPattern(this.image, "repeat");
        this.context.rect(this.rect[0], this.rect[1], this.rect[2], this.rect[3]);
        this.context.fill();
        return this.needAnimation = false;
      };

      return TilingImage;

    })(Image);
    Scene = (function(superClass) {
      extend(Scene, superClass);

      function Scene(options) {
        var stage;
        stage = options.parent || document.body;
        this.canvas = document.createElement("canvas");
        this.canvas.style.position = "absolute";
        stage.appendChild(this.canvas);
        this.context = this.canvas.getContext("2d");
        Scene.__super__.constructor.call(this, options);
        this.type = "scene";
        this.setZIndex(options.zIndex);
        this.setMask(options.mask);
        this.needAnimation = false;
      }

      Scene.prototype.add = function(options) {
        var result;
        if (options.type == null) {
          return;
        }
        if (options.visible == null) {
          options.visible = this.visible;
        }
        if (options.shadow == null) {
          options.shadow = this.shadow;
        }
        options.canvas = this.canvas;
        options.context = this.context;
        switch (options.type) {
          case "image":
            result = new Image(options);
            break;
          case "text":
            result = new Text(options);
            break;
          case "graph":
            result = new Graph(options);
            break;
          case "tile":
            result = new TilingImage(options);
        }
        this.childrens.push(result);
        return result;
      };

      Scene.prototype.setMask = function(value) {
        if ((value == null) || (!value)) {
          this.mask = false;
        } else {
          this.mask = value;
        }
        this.needAnimation = true;
        return this.mask;
      };

      Scene.prototype.setZIndex = function(value) {
        this.zIndex = this.int(value);
        this.canvas.style.zIndex = this.zIndex;
        return this.zIndex;
      };

      Scene.prototype.hide = function() {
        Scene.__super__.hide.call(this);
        return this.context.clearRect(0, 0, this.size[0], this.size[1]);
      };

      Scene.prototype.move = function(value1, value2) {
        Scene.__super__.move.call(this, value1, value2);
        this.canvas.style.left = this.position[0] + "px";
        this.canvas.style.top = this.position[1] + "px";
        return this.position;
      };

      Scene.prototype.shiftAll = function(value1, value2) {
        if (value2 == null) {
          value2 = 0;
        }
        return this.childrens.forEach(function(child) {
          return child.shift(value1, value2);
        });
      };

      Scene.prototype.resize = function(value1, value2) {
        Scene.__super__.resize.call(this, value1, value2);
        this.canvas.width = this.size[0];
        this.canvas.height = this.size[1];
        return this.size;
      };

      Scene.prototype.setCenter = function(value1, value2) {
        Scene.__super__.setCenter.call(this, value1, value2);
        this.context.translate(this.center[0], this.center[1]);
        return this.center;
      };

      Scene.prototype.setAnchor = function(value1, value2) {
        Scene.__super__.setAnchor.call(this, value1, value2);
        this.context.translate(this.center[0], this.center[1]);
        return this.anchor;
      };

      Scene.prototype.rotate = function(value) {
        Scene.__super__.rotate.call(this, value);
        this.context.rotate(this._rotation);
        return this.rotation;
      };

      Scene.prototype.setAlpha = function(value) {
        Scene.__super__.setAlpha.call(this, value);
        this.context.globalAlpha = this.alpha;
        return this.alpha;
      };

      Scene.prototype.animate = function() {
        if (!this.visible) {
          return;
        }
        this.context.clearRect(0, 0, this.size[0], this.size[1]);
        if (this.mask) {
          this.context.beginPath();
          this.context.rect(this.mask[0], this.mask[1], this.mask[2], this.mask[3]);
          this.context.clip();
        }
        this.childrens.forEach((function(_this) {
          return function(child) {
            _this.context.save();
            child.animate();
            return _this.context.restore();
          };
        })(this));
        return this.needAnimation = false;
      };

      return Scene;

    })(ContainerObject);
    CanvasEngine = (function(superClass) {
      extend(CanvasEngine, superClass);

      function CanvasEngine(options) {
        this._animate = bind(this._animate, this);
        if (!this.canvasSupport()) {
          console.log("your browser not support canvas and/or context");
          return false;
        }
        CanvasEngine.__super__.constructor.call(this, options);
        this.parent = options.parent || document.body;
        if (this.size[0] === 0 && this.size[1] === 0) {
          this.size = [this.int(this.parent.clientWidth), this.int(this.parent.clientHeight)];
        }
        this._beforeAnimate = [];
        this._scene = "default";
        this.add({
          type: "scene",
          name: "default"
        });
        this.start();
      }

      CanvasEngine.prototype.add = function(options) {
        var scene, type;
        if (options == null) {
          options = {};
        }
        type = options.type || "scene";
        if (type === "scene") {
          return this._createScene(options);
        } else {
          scene = this.get(options.scene);
          if (!scene) {
            scene = this.getActive();
          }
          if (!scene) {
            scene = this.add({
              type: "scene",
              name: "default"
            });
          }
          return scene.add(options);
        }
      };

      CanvasEngine.prototype.remove = function(childName) {
        var index;
        index = this.index(childName);
        if (index === -1) {
          return false;
        }
        this.parent.removeChild(this.childrens[index].canvas);
        this.childrens.splice(index, 1);
        return true;
      };

      CanvasEngine.prototype.onTop = function(childName) {
        var maxZ, result;
        maxZ = 0;
        result = false;
        this.childrens.forEach(function(child) {
          if (child.zIndex > maxZ) {
            maxZ = child.zIndex;
          }
          if (childName === child.name) {
            return result = child;
          }
        });
        if (result) {
          result.setZIndex(maxZ + 1);
        }
        return result;
      };

      CanvasEngine.prototype.getActive = function() {
        var result;
        result = this.get(this._scene);
        if (!result) {
          result = this.childrens[0];
        }
        if (!result) {
          result = false;
        }
        return result;
      };

      CanvasEngine.prototype.setActive = function(sceneName) {
        this._scene = sceneName || "default";
        return this.getActive();
      };

      CanvasEngine.prototype.start = function() {
        return this._render = requestAnimationFrame(this._animate);
      };

      CanvasEngine.prototype.stop = function() {
        return cancelAnimationFrame(this._render);
      };

      CanvasEngine.prototype.addEvent = function(func) {
        return this._beforeAnimate.push(func);
      };

      CanvasEngine.prototype.removeEvent = function(func) {
        return this._beforeAnimate.forEach((function(_this) {
          return function(item, i) {
            if (item === func) {
              return _this._beforeAnimate.splice(i, 1);
            }
          };
        })(this));
      };

      CanvasEngine.prototype.fullscreen = function(value) {
        if (value == null) {
          value = true;
        }
        if (value) {
          if (this.parent.requestFullScreen != null) {
            this.parent.requestFullScreen();
          } else if (this.parent.webkitRequestFullScreen != null) {
            this.parent.webkitRequestFullScreen();
          } else if (this.parent.mozRequestFullScreen != null) {
            this.parent.mozRequestFullScreen();
          } else {
            return false;
          }
        } else {
          if (document.cancelFullScreen != null) {
            document.cancelFullScreen();
          } else if (document.webkitCancelFullScreen != null) {
            document.webkitCancelFullScreen();
          } else if (document.mozCancelFullScreen != null) {
            document.mozCancelFullScreen();
          } else if (document.exitFullScreen != null) {
            document.exitFullScreen();
          } else {
            return false;
          }
        }
        return true;
      };

      CanvasEngine.prototype.isFullscreen = function() {
        var element;
        element = document.fullscreenElement || document.webkitFullscreenElement || document.mozFullscreenElement;
        return element != null;
      };

      CanvasEngine.prototype.canvasSupport = function() {
        return document.createElement("canvas").getContext != null;
      };

      CanvasEngine.prototype._createScene = function(options) {
        var scene;
        if (options.visible == null) {
          options.visible = this.visible;
        }
        if (options.position == null) {
          options.position = this.position;
        }
        if (options.size == null) {
          options.size = this.size;
        }
        if (options.center == null) {
          options.center = this.center;
        }
        if (options.rotation == null) {
          options.rotation = this.rotation;
        }
        if (options.alpha == null) {
          options.alpha = this.alpha;
        }
        if (options.mask == null) {
          options.mask = this.mask;
        }
        if (options.shadow == null) {
          options.shadow = this.shadow;
        }
        options.parent = this.parent;
        scene = new Scene(options);
        this.childrens.push(scene);
        this.setActive(scene.name);
        return scene;
      };

      CanvasEngine.prototype._animate = function() {
        this._beforeAnimate.forEach((function(_this) {
          return function(func, i) {
            if (typeof func === "function") {
              return func();
            } else {
              return _this._beforeAnimate.splice(i, 1);
            }
          };
        })(this));
        this.needAnimation = false;
        this.childrens.forEach((function(_this) {
          return function(child) {
            var needAnimation;
            needAnimation = child.needAnimation || child.childrens.some(function(childOfChild) {
              return childOfChild.needAnimation;
            });
            _this.needAnimation = _this.needAnimation || needAnimation;
            if (needAnimation) {
              return child.animate();
            }
          };
        })(this));
        return this._render = requestAnimationFrame(this._animate);
      };

      return CanvasEngine;

    })(ContainerObject);
    return CanvasEngine;
  });

}).call(this);
